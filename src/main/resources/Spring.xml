<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="
	    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">


    <!-- 扫描service、dao组件 -->
    <context:component-scan base-package="com.test.hw" />
    <!-- 分解配置 jdbc.properites -->
    <context:property-placeholder location="classpath:Appconfig.properties" />


    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driverClassName}" />
        <property name="jdbcUrl" value="${jdbc.url}" />
        <property name="user" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <property name="maxPoolSize" value="${c3p0.pool.size.max}" />
        <property name="minPoolSize" value="${c3p0.pool.size.min}" />
        <property name="initialPoolSize" value="${c3p0.pool.size.ini}" />
        <property name="acquireIncrement" value="${c3p0.pool.size.increment}" />
    </bean>


    <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource"></property>
        <property name="hibernateProperties">
            <props>
                <!--设置hibernate的方言、是否格式化sql、展示sql、定位sql-->
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.format_sql">true</prop>
                <prop key="hibernate.use_sql_comments">true</prop>

                <!-- 为单向关联（一对一，多对一）的外连接抓取（outer join fetch）树设置最大深度。建议在 0 到 3 之间取值 -->
                <prop key="hibernate.max_fetch_depth">2</prop>
                <!-- 为 Hibernate 关联的批量抓取设置默认数量 建议的取值为 4， 8，和 16 -->
                <prop key="hibernate.default_batch_fetch_size">16</prop>
                <!-- 非零值，指定 JDBC 抓取数量的大小（调用Statement.setFetchSize() ） -->
                <prop key="hibernate.jdbc.fetch_size">100</prop>
                <!-- 非零值，允许 Hibernate 使用 JDBC2 的批量更新。例如： 建议取 5 到 30 之间的值 -->
                <prop key="hibernate.jdbc.batch_size">30</prop>
                <prop key="hibernate.cache.use_second_level_cache">false</prop>
                <prop key="hibernate.cache.use_query_cache">false</prop>

                <!--
               # 设置JDBC事务隔离级别
               # 1：读操作未提交（Read Uncommitted）
               # 2：读操作已提交（Read Committed）
               # 4：可重读（Repeatable Read）
               # 8：可串行化（Serializable）
               -->
                <prop key="hibernate.connection.isolation">2</prop>

                <!-- 如果打开，允许被缓存的 JDBC 连接开启自动提交 -->
                <prop key="hibernate.connection.autocommit">false</prop>

                <prop key="hibernate.autoReconnect">true</prop>
                <!-- 在 SessionFactory 创建时，自动检查数据库
                  结构，或者将数据库 schema 的 DDL 导出
                  到数据库。使用 create-drop 时，在显式关闭
                  SessionFactory 时，将删除掉数据库 schema。 例如： validate | update | create | createdrop -->
                <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
                <prop key="hibernate.bytecode.provider">javassist</prop>
            </props>

        </property>
        <property name="packagesToScan">
            <list>
                <value>${entity.package}</value>
            </list>
        </property>
    </bean>

    <bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>
    <tx:advice id="transactionAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="add*" propagation="REQUIRED" />
            <tx:method name="append*" propagation="REQUIRED" />
            <tx:method name="insert*" propagation="REQUIRED" />
            <tx:method name="save*" propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED" />
            <tx:method name="modify*" propagation="REQUIRED" />
            <tx:method name="edit*" propagation="REQUIRED" />
            <tx:method name="delete*" propagation="REQUIRED" />
            <tx:method name="remove*" propagation="REQUIRED" />
            <tx:method name="repair" propagation="REQUIRED" />
            <tx:method name="delAndRepair" propagation="REQUIRED" />

            <tx:method name="get*" propagation="SUPPORTS" />
            <tx:method name="find*" propagation="SUPPORTS" />
            <tx:method name="load*" propagation="SUPPORTS" />
            <tx:method name="search*" propagation="SUPPORTS" />
            <tx:method name="datagrid*" propagation="SUPPORTS" />

            <tx:method name="*" propagation="SUPPORTS" />
        </tx:attributes>
    </tx:advice>
    <aop:config>
        <aop:pointcut id="transactionPointcut" expression="execution(* com.test.hw.service..*(..))" />
        <aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice" />
    </aop:config>
</beans>